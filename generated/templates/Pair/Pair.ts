// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AmountSwapped extends ethereum.Event {
  get params(): AmountSwapped__Params {
    return new AmountSwapped__Params(this);
  }
}

export class AmountSwapped__Params {
  _event: AmountSwapped;

  constructor(event: AmountSwapped) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountAIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountBIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountAOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountBOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _receiver(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class Initialised extends ethereum.Event {
  get params(): Initialised__Params {
    return new Initialised__Params(this);
  }
}

export class Initialised__Params {
  _event: Initialised;

  constructor(event: Initialised) {
    this._event = event;
  }

  get tokenA(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lpTokensMinted(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lpTokensBurned(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PoolLocked extends ethereum.Event {
  get params(): PoolLocked__Params {
    return new PoolLocked__Params(this);
  }
}

export class PoolLocked__Params {
  _event: PoolLocked;

  constructor(event: PoolLocked) {
    this._event = event;
  }
}

export class PoolUnlocked extends ethereum.Event {
  get params(): PoolUnlocked__Params {
    return new PoolUnlocked__Params(this);
  }
}

export class PoolUnlocked__Params {
  _event: PoolUnlocked;

  constructor(event: PoolUnlocked) {
    this._event = event;
  }
}

export class ReservesUpdated extends ethereum.Event {
  get params(): ReservesUpdated__Params {
    return new ReservesUpdated__Params(this);
  }
}

export class ReservesUpdated__Params {
  _event: ReservesUpdated;

  constructor(event: ReservesUpdated) {
    this._event = event;
  }

  get reserveA(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reserveB(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Pair__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class Pair__getPoolFeeResultValue0Struct extends ethereum.Tuple {
  get numerator(): BigInt {
    return this[0].toBigInt();
  }

  get denominator(): BigInt {
    return this[1].toBigInt();
  }
}

export class Pair__getPoolTokensResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class Pair__getProtocolFeeResultValue0Struct extends ethereum.Tuple {
  get numerator(): BigInt {
    return this[0].toBigInt();
  }

  get denominator(): BigInt {
    return this[1].toBigInt();
  }
}

export class Pair__getReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Pair__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Pair extends ethereum.SmartContract {
  static bind(address: Address): Pair {
    return new Pair("Pair", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  addLiquidity(_receiver: Address): BigInt {
    let result = super.call("addLiquidity", "addLiquidity(address):(uint256)", [
      ethereum.Value.fromAddress(_receiver),
    ]);

    return result[0].toBigInt();
  }

  try_addLiquidity(_receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(address):(uint256)",
      [ethereum.Value.fromAddress(_receiver)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  eip712Domain(): Pair__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new Pair__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<Pair__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  getFactory(): Address {
    let result = super.call("getFactory", "getFactory():(address)", []);

    return result[0].toAddress();
  }

  try_getFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("getFactory", "getFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolFee(): Pair__getPoolFeeResultValue0Struct {
    let result = super.call(
      "getPoolFee",
      "getPoolFee():((uint256,uint256))",
      [],
    );

    return changetype<Pair__getPoolFeeResultValue0Struct>(result[0].toTuple());
  }

  try_getPoolFee(): ethereum.CallResult<Pair__getPoolFeeResultValue0Struct> {
    let result = super.tryCall(
      "getPoolFee",
      "getPoolFee():((uint256,uint256))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pair__getPoolFeeResultValue0Struct>(value[0].toTuple()),
    );
  }

  getPoolTokens(): Pair__getPoolTokensResult {
    let result = super.call(
      "getPoolTokens",
      "getPoolTokens():(address,address)",
      [],
    );

    return new Pair__getPoolTokensResult(
      result[0].toAddress(),
      result[1].toAddress(),
    );
  }

  try_getPoolTokens(): ethereum.CallResult<Pair__getPoolTokensResult> {
    let result = super.tryCall(
      "getPoolTokens",
      "getPoolTokens():(address,address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__getPoolTokensResult(value[0].toAddress(), value[1].toAddress()),
    );
  }

  getProtocolFee(): Pair__getProtocolFeeResultValue0Struct {
    let result = super.call(
      "getProtocolFee",
      "getProtocolFee():((uint256,uint256))",
      [],
    );

    return changetype<Pair__getProtocolFeeResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getProtocolFee(): ethereum.CallResult<Pair__getProtocolFeeResultValue0Struct> {
    let result = super.tryCall(
      "getProtocolFee",
      "getProtocolFee():((uint256,uint256))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pair__getProtocolFeeResultValue0Struct>(value[0].toTuple()),
    );
  }

  getProtocolTeamMultisig(): Address {
    let result = super.call(
      "getProtocolTeamMultisig",
      "getProtocolTeamMultisig():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getProtocolTeamMultisig(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProtocolTeamMultisig",
      "getProtocolTeamMultisig():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserves(): Pair__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves():(uint256,uint256)",
      [],
    );

    return new Pair__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getReserves(): ethereum.CallResult<Pair__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves():(uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__getReservesResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  isPoolToken(_token: Address): boolean {
    let result = super.call("isPoolToken", "isPoolToken(address):(bool)", [
      ethereum.Value.fromAddress(_token),
    ]);

    return result[0].toBoolean();
  }

  try_isPoolToken(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPoolToken", "isPoolToken(address):(bool)", [
      ethereum.Value.fromAddress(_token),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeLiquidity(_receiver: Address): Pair__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_receiver)],
    );

    return new Pair__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_removeLiquidity(
    _receiver: Address,
  ): ethereum.CallResult<Pair__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_receiver)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__removeLiquidityResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockPoolCall extends ethereum.Call {
  get inputs(): LockPoolCall__Inputs {
    return new LockPoolCall__Inputs(this);
  }

  get outputs(): LockPoolCall__Outputs {
    return new LockPoolCall__Outputs(this);
  }
}

export class LockPoolCall__Inputs {
  _call: LockPoolCall;

  constructor(call: LockPoolCall) {
    this._call = call;
  }
}

export class LockPoolCall__Outputs {
  _call: LockPoolCall;

  constructor(call: LockPoolCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get _swapParams(): SwapCall_swapParamsStruct {
    return changetype<SwapCall_swapParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SwapCall_swapParamsStruct extends ethereum.Tuple {
  get amountAOut(): BigInt {
    return this[0].toBigInt();
  }

  get amountBOut(): BigInt {
    return this[1].toBigInt();
  }

  get receiver(): Address {
    return this[2].toAddress();
  }

  get hookConfig(): SwapCall_swapParamsHookConfigStruct {
    return changetype<SwapCall_swapParamsHookConfigStruct>(this[3].toTuple());
  }

  get data(): Bytes {
    return this[4].toBytes();
  }
}

export class SwapCall_swapParamsHookConfigStruct extends ethereum.Tuple {
  get hookBeforeCall(): boolean {
    return this[0].toBoolean();
  }

  get hookAfterCall(): boolean {
    return this[1].toBoolean();
  }
}

export class SyncBalancesBasedOnReservesCall extends ethereum.Call {
  get inputs(): SyncBalancesBasedOnReservesCall__Inputs {
    return new SyncBalancesBasedOnReservesCall__Inputs(this);
  }

  get outputs(): SyncBalancesBasedOnReservesCall__Outputs {
    return new SyncBalancesBasedOnReservesCall__Outputs(this);
  }
}

export class SyncBalancesBasedOnReservesCall__Inputs {
  _call: SyncBalancesBasedOnReservesCall;

  constructor(call: SyncBalancesBasedOnReservesCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SyncBalancesBasedOnReservesCall__Outputs {
  _call: SyncBalancesBasedOnReservesCall;

  constructor(call: SyncBalancesBasedOnReservesCall) {
    this._call = call;
  }
}

export class SyncReservesBasedOnBalancesCall extends ethereum.Call {
  get inputs(): SyncReservesBasedOnBalancesCall__Inputs {
    return new SyncReservesBasedOnBalancesCall__Inputs(this);
  }

  get outputs(): SyncReservesBasedOnBalancesCall__Outputs {
    return new SyncReservesBasedOnBalancesCall__Outputs(this);
  }
}

export class SyncReservesBasedOnBalancesCall__Inputs {
  _call: SyncReservesBasedOnBalancesCall;

  constructor(call: SyncReservesBasedOnBalancesCall) {
    this._call = call;
  }
}

export class SyncReservesBasedOnBalancesCall__Outputs {
  _call: SyncReservesBasedOnBalancesCall;

  constructor(call: SyncReservesBasedOnBalancesCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnlockPoolCall extends ethereum.Call {
  get inputs(): UnlockPoolCall__Inputs {
    return new UnlockPoolCall__Inputs(this);
  }

  get outputs(): UnlockPoolCall__Outputs {
    return new UnlockPoolCall__Outputs(this);
  }
}

export class UnlockPoolCall__Inputs {
  _call: UnlockPoolCall;

  constructor(call: UnlockPoolCall) {
    this._call = call;
  }
}

export class UnlockPoolCall__Outputs {
  _call: UnlockPoolCall;

  constructor(call: UnlockPoolCall) {
    this._call = call;
  }
}
