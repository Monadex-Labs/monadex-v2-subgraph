# stores for USD calculations
type Bundle @entity {
  id: ID!
  # Monad Price
  monPrice: BigDecimal! 
}

type MonaFactory @entity {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume USD
  totalVolumeUSD: BigDecimal!

  # total volume MONAD
  totalVolumeMON: BigDecimal!

  # daily volume untracked 
  dailyVolumeUntracked: BigDecimal!

  # tvl MON
  totalValueLockedMON: BigDecimal!
  
  # tvl USD
  totalValueLockedUSD: BigDecimal!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!

  # total volume MONAD
  totalLiquidityMON: BigDecimal!

  # transactions
  txCount: BigInt!

  # Pairs
  pairs: [Pair!]! @derivedFrom(field: "factory")

  # Tokens
  tokens: [Token!]! @derivedFrom(field: "factory")

  # Hour data
  hourData: [MonadexHourData!]! @derivedFrom(field: "factory")

  # Day data
  dayData: [MonadexDayData!]! @derivedFrom(field: "factory")

}

type MonadexDayData @entity {
  # timestamp / 86400
  id: ID! 

  date: Int!

  # factory
  factory: MonaFactory!

  # daily volume in MON
  dailyVolumeMON: BigDecimal!
  
  # daily volume in USD
  dailyVolumeUSD: BigDecimal!
 
  # daily volume untracked 
  dailyVolumeUntracked: BigDecimal!

  # tvl MON
  totalValueLockedMON: BigDecimal!
  
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  
  # daily volume in MON
  totalVolumeMON: BigDecimal!

  # total Liq in MON
  totalLiquidityMON: BigDecimal!
  
  # total volume in USD
  totalVolumeUSD: BigDecimal! 
  
  # total Liquidity in MON
  totalLiquidityUSD: BigDecimal!
  
  # Number of tx made
  txCount: BigInt!
}

type MonadexHourData @entity {
  id: ID! 

  date: Int!

  # factory
  factory: MonaFactory!

  # daily volume in MON
  dailyVolumeMON: BigDecimal!
  
  # daily volume in USD
  dailyVolumeUSD: BigDecimal!
 
  # daily volume untracked 
  dailyVolumeUntracked: BigDecimal!

  # tvl MON
  totalValueLockedMON: BigDecimal!
  
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  
  # daily volume in MON
  totalVolumeMON: BigDecimal!

  # total Liq in MON
  totalLiquidityMON: BigDecimal!
  
  # total volume in USD
  totalVolumeUSD: BigDecimal! 
  
  # total Liquidity in MON
  totalLiquidityUSD: BigDecimal!
  
  # Number of tx made
  txCount: BigInt!
}

# TOKEN -------------------------------------
type Token @entity {
  # token address
  id: ID!
 
 
  # Factory
  factory: MonaFactory!
  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!

  # tvl across all pairs
  totalValueLocked: BigDecimal!
  # tvl USD
  totalValueLockedUSD: BigDecimal!

  # for teacking volume
  whitelist: [String!]!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedMON: BigDecimal

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")

  pairDayDataBase: [PairDayData!]! @derivedFrom(field: "token0")
  
  pairDayDataQuote: [PairDayData!]! @derivedFrom(field: "token1")
  
  pairBase: [Pair!]! @derivedFrom(field: "s_tokenA")
  
  pairQuote: [Pair!]! @derivedFrom(field: "s_tokenB")
}
type TokenDayData @entity {
  # timestamp / 86400
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeMON: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # tvl
  totalValueLocked: BigDecimal!
  # tvl MON
  totalValueLockedMON: BigDecimal! 
  # tvl USD
  totalValueLockedUSD: BigDecimal!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityMON: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}

type TokenHourData @entity {
  # timestamp / 3600
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeMON: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # tvl
  totalValueLocked: BigDecimal!
  # tvl MON
  totalValueLockedMON: BigDecimal! 
  # tvl USD
  totalValueLockedUSD: BigDecimal!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityMON: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}



# PAIR -------------------------------------

type Pair @entity {
  # pair address
  id: ID!

  factory: MonaFactory!
  # mirrored from the smart contract
  s_tokenA: Token!
  s_tokenB: Token!
  s_reserveA: BigDecimal!
  s_reserveB: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveMON: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveMON: BigDecimal! # used for separating per pair reserves and global
  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # tvl MON
  totalValueLockedMON: BigDecimal! 
  # tvl USD
  totalValueLockedUSD: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  mints: [LiquidityAdded!]! @derivedFrom(field: "pair")
  burns: [LiquidityRemoved!]! @derivedFrom(field: "pair")
  swaps: [AmountSwapped!]! @derivedFrom(field: "pair")
}


# Data accumulated and condensed into day stats for each exchange
type PairDayData @entity {
  # timestamp / 86400
  id: ID!
  date: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # tvl at end of day
  totalValueLockedUSD: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}

type PairHourData @entity {
  # timestamp / 3600
  id: ID!
  date: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!
  hourStartUnix: Int! # unix timestamp for start of hour
  # Pair
  pair: Pair!
  
  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # tvl at end of the hour
  totalValueLockedUSD: BigDecimal!
  
  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

 # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

type User @entity {
  id: ID!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
  usdSwapped: BigDecimal!
}

type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: Pair! # reference to pair
  token0PriceUSD: BigDecimal! # snapshot of token0 price
  token1PriceUSD: BigDecimal! # snapshot of token1 price
  reserve0: BigDecimal! # snapshot of pair token0 reserves
  reserve1: BigDecimal! # snapshot of pair token1 reserves
  reserveUSD: BigDecimal! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  # This is not the reverse of LiquidityAdded.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [LiquidityAdded!]!
  burns: [LiquidityRemoved!]!
  swaps: [AmountSwapped!]!
}

type LiquidityAdded @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the LiquidityAdded event
  by: Bytes
  receiver: Bytes
  amountA: BigDecimal
  amountB: BigDecimal
  lpTokensMinted: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type LiquidityRemoved @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the LiquidityRemoved event
  by: Bytes
  receiver: Bytes
  amountA: BigDecimal
  amountB: BigDecimal
  lpTokensBurned: BigDecimal 
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in MON case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type AmountSwapped @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the AmountSwapped event
  caller: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amountAIn: BigDecimal!
  amountBIn: BigDecimal!
  amountAOut: BigDecimal!
  amountBOut: BigDecimal!
  _receiver: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!
}




